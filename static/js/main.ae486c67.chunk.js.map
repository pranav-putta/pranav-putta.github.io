{"version":3,"sources":["assets/images/t2.jpg","assets/images/arrow-down.svg","assets/colors.ts","components/Header.tsx","components/AnimatedButton.tsx","screens/Home/ProjectsSection.tsx","screens/Home/index.tsx","navigation/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AnimatedTouchableOpacity","Animated","createAnimatedComponent","TouchableOpacity","Header","props","animation","headerOpacity","line","borderRadius","Button","label","bgColor","click","style","width","height","backgroundColor","marginLeft","marginRight","marginTop","justifyContent","alignItems","borderColor","onPress","Text","fontWeight","fontSize","color","Value","interpolate","inputRange","outputRange","sequence","timing","this","toValue","useNativeDriver","delay","start","View","styles","container","offset","speed","Image","flex","resizeMode","source","require","headerContainer","opacity","headerTextContainer","headerText","colors","flexDirection","scrollToProjects","position","padding","left","bottom","React","Component","StyleSheet","create","backgroundImage","fontFamily","letterSpacing","headerCaptionText","textAlign","profile","marginBottom","borderWidth","ProjectsSection","GridList","cellHeight","cols","projects","map","project","GridListTile","key","name","window","open","url","GridListTileBar","title","subtitle","description","Home","parallax","useNavigation","navigate","pages","ref","scrollTo","Stack","createStackNavigator","Navigation","NavigationContainer","Navigator","Screen","component","options","headerShown","App","Platform","OS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,gC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,uMCA5B,EACJ,UADI,EAEL,U,QCUJC,EAA2BC,IAASC,wBACxCC,KAQWC,EAAb,kDAME,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IANAC,eAKgB,IAJhBC,mBAIgB,IAHhBC,UAGgB,IAFhBC,kBAEgB,IAkBxBC,OAAS,SAACC,EAAeC,EAAiBC,GACxC,OACE,kBAACb,EAAD,CACEc,MAAO,CACLC,MAAO,IACPC,OAAQ,GACRP,aAAc,EAAKA,aACnBQ,gBAAiBL,EACjBM,WAAY,EACZC,YAAa,GACbC,UAAW,GACXC,eAAgB,SAChBC,WAAY,SACZC,YAAa,SAEfC,QAASX,GAET,kBAACY,EAAA,EAAD,CAAMX,MAAO,CAAEY,WAAY,OAAQC,SAAU,GAAIC,MAAO,UACrDjB,KAjCP,EAAKL,UAAY,IAAIL,IAAS4B,MAAM,GACpC,EAAKtB,cAAgB,EAAKD,UAAUwB,YAAY,CAC9CC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,EAAG,KAEnB,EAAKxB,KAAO,EAAKF,UAAUwB,YAAY,CACrCC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,EAAG,OAEnB,EAAKvB,aAAe,EAAKH,UAAUwB,YAAY,CAC7CC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,EAAG,MAdG,EAN1B,gEAiDI/B,IAASgC,SAAS,CAChBhC,IAASiC,OAAOC,KAAK7B,UAAW,CAC9B8B,QAAS,EACTC,iBAAiB,EACjBC,MAAO,QAERC,UAvDP,+BA2DI,OACE,kBAACC,EAAA,EAAD,CAAM1B,MAAO2B,EAAOC,WAClB,kBAAC,gBAAD,CAAeC,OAAQ,EAAGC,MAAO,KAC/B,kBAACC,EAAA,EAAD,CACE/B,MAAO,CACLgC,KAAM,EACN/B,MAAO,OACPC,OAAQ,QACR+B,WAAY,UAEdC,OAAQC,EAAQ,QAGpB,kBAAC,gBAAD,CAAeN,OAAQ,EAAGC,MAAO,GAC/B,kBAAC3C,EAAA,EAASuC,KAAV,CACE1B,MAAO,CAAC2B,EAAOS,gBAAiB,CAAEC,QAAShB,KAAK5B,iBAEhD,kBAACiC,EAAA,EAAD,CAAM1B,MAAO,CAAC2B,EAAOW,sBACnB,kBAAC3B,EAAA,EAAD,CAAMX,MAAO2B,EAAOY,YAApB,gBACA,kBAACpD,EAAA,EAASuC,KAAV,CACE1B,MAAO,CACLC,MAAOoB,KAAK3B,KACZY,UAAW,EACXJ,OAAQ,EACRE,WAAY,EACZD,gBAAiBqC,KAGrB,kBAACd,EAAA,EAAD,CAAM1B,MAAO,CAAEyC,cAAe,QAC3BpB,KAAKzB,OACJ,cACA4C,EACAnB,KAAK9B,MAAMmD,kBAEZrB,KAAKzB,OAAO,aAAc4C,GAAe,iBAG9C,kBAACnD,EAAA,EAAD,CACEW,MAAO,CACL2C,SAAU,WACVxC,gBAAiB,QACjByC,QAAS,GACTjD,aAAc,GACdkD,KAAM,MACNC,OAAQ,QAGV,kBAACf,EAAA,EAAD,CACE/B,MAAO,CAAEC,MAAO,GAAIC,OAAQ,IAC5BgC,OAAQC,EAAQ,eA5GhC,GAA4BY,IAAMC,WAsH5BrB,EAASsB,IAAWC,OAAO,CAC/BtB,UAAW,CACTI,KAAM,EACN/B,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QACjBI,eAAgB,SAChBC,WAAY,UAEd2C,gBAAiB,CACfnB,KAAM,EACN/B,MAAO,OACPC,OAAQ,OACRyC,SAAU,YAEZJ,WAAY,CACVzB,MAAO,QACPsC,WAAY,aACZvC,SAAU,GACVD,WAAY,OACZyC,cAAe,IAEjBC,kBAAmB,CACjBxC,MAAO,QACPsC,WAAY,aACZvC,SAAU,GACVD,WAAY,MACZN,UAAW,GACXiD,UAAW,QAEbnB,gBAAiB,CACfnC,MAAO,OAEPC,OAAQ,OACRC,gBAAiB,mBACjBwC,SAAU,WACVpC,eAAgB,SAChBC,WAAY,SACZiC,cAAe,OAEjBH,oBAAqB,CACnB/B,eAAgB,SAChByB,KAAM,EACN5B,WAAY,OAEdoD,QAAS,CACPvD,MAAO,GACPC,OAAQ,GACR+B,WAAY,QACZtC,aAAc,GACd8D,aAAc,GACdC,YAAa,EACbjD,YAAa,W,YCjLmBsC,IAAMC,U,0BCG7BW,EAAb,uKAEI,OACE,kBAACjC,EAAA,EAAD,CAAM1B,MAAO2B,EAAOC,WAClB,kBAACgC,EAAA,EAAD,CACEC,WAAY,IACZC,KAAM,EACN9D,MAAO,CACLC,MAAO,OACPC,OAAQ,QACR8B,KAAM,IAGPX,KAAK9B,MAAMwE,SAASC,KAAI,SAACC,GACxB,OACE,kBAACC,EAAA,EAAD,CACElE,MAAO,CAAEE,OAAQ,IAAK0C,QAAS,IAC/BuB,IAAKF,EAAQG,KACbN,KAAMG,EAAQH,MAAQ,GAEtB,kBAACzE,EAAA,EAAD,CACEW,MAAO,CACLgC,KAAM,EACN9B,OAAQ,OACRD,MAAO,OACPE,gBAAiB8D,EAAQnD,MACzBnB,aAAc,IAEhBe,QAAS,WACP2D,OAAOC,KAAKL,EAAQM,IAAK,YAG7B,kBAACC,EAAA,EAAD,CACExE,MAAO,CAAE4C,QAAS,MAClB6B,MAAOR,EAAQG,KACfM,SACE,kBAAC/D,EAAA,EAAD,CAAMX,MAAO,CAAEc,MAAO,QAASD,SAAU,KACtCoD,EAAQU,yBArC/B,GAAqC5B,IAAMC,WAkDrCrB,EAASsB,IAAWC,OAAO,CAC/BtB,UAAW,CACT1B,OAAQ,QACRD,MAAO,OACPE,gBAAiB,QACjBI,eAAgB,SAChBC,WAAY,SACZoC,QAAS,SC9DN,SAASgC,IAAQ,IAElBC,EADiBC,0BAAbC,SAER,OACE,kBAAC,WAAD,CAAUC,MAAO,EAAGC,IAAK,SAACA,GAAD,OAAUJ,EAAWI,IAC5C,kBAAC,gBAAD,CAAepD,OAAQ,EAAGC,MAAO,GAC/B,kBAAC,EAAD,CACEY,iBAAkB,WAAO,IAAD,EACd,QAAR,EAAAmC,SAAA,SAAUK,SAAS,OAIzB,kBAAC,gBAAD,CAAerD,OAAQ,EAAGC,MAAO,GAC/B,kBAAC,EAAD,CACEiC,SAAU,CACR,CACEjD,MAAO0B,EACP4B,KAAM,UACNO,YACE,oHACFJ,IAAK,4CAEP,CACEzD,MAAO0B,EACP4B,KAAM,aACNO,YACE,iEACFJ,IAAK,mDASJtB,IAAWC,OAAO,CAC/BtB,UAAW,CACTI,KAAM,KAFV,ICvCMmD,EAAQC,cAEP,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAMI,UAAP,KACE,kBAACJ,EAAMK,OAAP,CACEpB,KAAK,OACLqB,UAAWb,EACXc,QAAS,CAAEC,aAAa,O,ICf5BC,E,uKAEF,OACE,kBAAClE,EAAA,EAAD,CAAM1B,MAAO2B,EAAOC,WAClB,kBAACyD,EAAD,W,GAJUtC,IAAMC,WAUlB9C,EAAwB,OAAf2F,IAASC,GAAc,QAAU,OAE1CnE,EAASsB,IAAWC,OAAO,CAC/BtB,UAAW,CACTI,KAAM,EACN9B,OAAQA,EACRD,MAAO,UAGI2F,ICVKG,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae486c67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/t2.034e867c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-down.673e86d5.svg\";","export default {\n  primary: \"#4392F1\",\n  accent: \"#ffab40\",\n};\n","import React from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Image,\n  Text,\n  Animated,\n  TouchableOpacity,\n} from \"react-native\";\nimport colors from \"../assets/colors\";\nimport { ParallaxLayer } from \"react-spring/renderprops-addons\";\n\nconst AnimatedTouchableOpacity = Animated.createAnimatedComponent(\n  TouchableOpacity\n);\n\ninterface Props {\n  scrollToProjects: () => void;\n}\ninterface State {}\n\nexport class Header extends React.Component<Props, State> {\n  private animation: Animated.Value;\n  private headerOpacity: Animated.AnimatedInterpolation;\n  private line: Animated.AnimatedInterpolation;\n  private borderRadius: Animated.AnimatedInterpolation;\n\n  constructor(props: any) {\n    super(props);\n\n    this.animation = new Animated.Value(0);\n    this.headerOpacity = this.animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n    });\n    this.line = this.animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 160],\n    });\n    this.borderRadius = this.animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 10],\n    });\n  }\n\n  Button = (label: string, bgColor: string, click: () => void) => {\n    return (\n      <AnimatedTouchableOpacity\n        style={{\n          width: 120,\n          height: 40,\n          borderRadius: this.borderRadius,\n          backgroundColor: bgColor,\n          marginLeft: 2,\n          marginRight: 20,\n          marginTop: 40,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderColor: \"white\",\n        }}\n        onPress={click}\n      >\n        <Text style={{ fontWeight: \"bold\", fontSize: 15, color: \"white\" }}>\n          {label}\n        </Text>\n      </AnimatedTouchableOpacity>\n    );\n  };\n\n  componentDidMount() {\n    Animated.sequence([\n      Animated.timing(this.animation, {\n        toValue: 1,\n        useNativeDriver: true,\n        delay: 500,\n      }),\n    ]).start();\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <ParallaxLayer offset={0} speed={0.25}>\n          <Image\n            style={{\n              flex: 1,\n              width: \"100%\",\n              height: \"100vh\",\n              resizeMode: \"center\",\n            }}\n            source={require(\"../assets/images/t2.jpg\")}\n          />\n        </ParallaxLayer>\n        <ParallaxLayer offset={0} speed={0}>\n          <Animated.View\n            style={[styles.headerContainer, { opacity: this.headerOpacity }]}\n          >\n            <View style={[styles.headerTextContainer]}>\n              <Text style={styles.headerText}>PRANAV PUTTA</Text>\n              <Animated.View\n                style={{\n                  width: this.line,\n                  marginTop: 5,\n                  height: 4,\n                  marginLeft: 2,\n                  backgroundColor: colors.primary,\n                }}\n              />\n              <View style={{ flexDirection: \"row\" }}>\n                {this.Button(\n                  \"My Projects\",\n                  colors.primary,\n                  this.props.scrollToProjects\n                )}\n                {this.Button(\"Contact Me\", colors.accent, () => {})}\n              </View>\n            </View>\n            <TouchableOpacity\n              style={{\n                position: \"absolute\",\n                backgroundColor: \"white\",\n                padding: 10,\n                borderRadius: 40,\n                left: \"10%\",\n                bottom: \"10%\",\n              }}\n            >\n              <Image\n                style={{ width: 22, height: 22 }}\n                source={require(\"../assets/images/arrow-down.svg\")}\n              />\n            </TouchableOpacity>\n          </Animated.View>\n        </ParallaxLayer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  backgroundImage: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  headerText: {\n    color: \"white\",\n    fontFamily: \"sans-serif\",\n    fontSize: 40,\n    fontWeight: \"bold\",\n    letterSpacing: 10,\n  },\n  headerCaptionText: {\n    color: \"white\",\n    fontFamily: \"sans-serif\",\n    fontSize: 20,\n    fontWeight: \"100\",\n    marginTop: 10,\n    textAlign: \"left\",\n  },\n  headerContainer: {\n    width: \"100%\",\n    //maxWidth: 1000,\n    height: \"100%\",\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  headerTextContainer: {\n    justifyContent: \"center\",\n    flex: 2,\n    marginLeft: \"10%\",\n  },\n  profile: {\n    width: 90,\n    height: 90,\n    resizeMode: \"cover\",\n    borderRadius: 50,\n    marginBottom: 20,\n    borderWidth: 2,\n    borderColor: \"white\",\n  },\n});\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Svg, Text, Rect } from \"react-native-svg\";\n\ninterface Props {\n  height: number;\n  width: number;\n  color: string;\n  textColor: string;\n  label: string;\n  style: any;\n}\ninterface State {}\n\nexport class AnimatedButton extends React.Component<Props, State> {\n  render() {\n    return (\n      <Svg\n        style={this.props.style}\n        height={this.props.height}\n        width={this.props.width}\n      >\n        <Rect\n          rx={10}\n          ry={10}\n          width=\"100%\"\n          height=\"100%\"\n          fill={this.props.color}\n        ></Rect>\n        <Text\n          x={this.props.width / 2}\n          y={(this.props.height * 3) / 5}\n          textAnchor=\"middle\"\n          fontWeight=\"bold\"\n          fill={this.props.textColor}\n        >\n          {this.props.label}\n        </Text>\n      </Svg>\n    );\n  }\n}\n","import React from \"react\";\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { GridList, GridListTile, GridListTileBar } from \"@material-ui/core\";\n\ninterface Project {\n  name: string;\n  description: string;\n  color: string;\n  cols?: number;\n  url: string;\n}\n\ninterface Props {\n  projects: Project[];\n}\ninterface State {}\n\nexport class ProjectsSection extends React.Component<Props, State> {\n  render() {\n    return (\n      <View style={styles.container}>\n        <GridList\n          cellHeight={160}\n          cols={2}\n          style={{\n            width: \"100%\",\n            height: \"100vh\",\n            flex: 1,\n          }}\n        >\n          {this.props.projects.map((project) => {\n            return (\n              <GridListTile\n                style={{ height: 300, padding: 20 }}\n                key={project.name}\n                cols={project.cols || 1}\n              >\n                <TouchableOpacity\n                  style={{\n                    flex: 1,\n                    height: \"100%\",\n                    width: \"100%\",\n                    backgroundColor: project.color,\n                    borderRadius: 20,\n                  }}\n                  onPress={() => {\n                    window.open(project.url, \"_self\");\n                  }}\n                ></TouchableOpacity>\n                <GridListTileBar\n                  style={{ padding: \"2%\" }}\n                  title={project.name}\n                  subtitle={\n                    <Text style={{ color: \"white\", fontSize: 12 }}>\n                      {project.description}\n                    </Text>\n                  }\n                />\n              </GridListTile>\n            );\n          })}\n        </GridList>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100vh\",\n    width: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: \"15%\",\n  },\n});\n","import { useNavigation } from \"@react-navigation/native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport React, { useRef } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { StackParams } from \"../../navigation\";\nimport { Header } from \"../../components/\";\nimport { Parallax, ParallaxLayer } from \"react-spring/renderprops-addons\";\nimport { ProjectsSection } from \"./ProjectsSection\";\nimport colors from \"../../assets/colors\";\n\ntype NavigationProps = StackNavigationProp<StackParams, \"Home\">;\n\nexport function Home() {\n  const { navigate } = useNavigation<NavigationProps>();\n  let parallax: Parallax | null;\n  return (\n    <Parallax pages={2} ref={(ref) => (parallax = ref)}>\n      <ParallaxLayer offset={0} speed={0}>\n        <Header\n          scrollToProjects={() => {\n            parallax?.scrollTo(1);\n          }}\n        />\n      </ParallaxLayer>\n      <ParallaxLayer offset={1} speed={0}>\n        <ProjectsSection\n          projects={[\n            {\n              color: colors.primary,\n              name: \"Odyssey\",\n              description:\n                \"A voting application aimed at bridgint the current gap that exists between representatives and their constituents\",\n              url: \"https://github.com/pranavputta22/odyssey\",\n            },\n            {\n              color: colors.primary,\n              name: \"Mathscript\",\n              description:\n                \"A lightweight scripting language for mathematical calculations\",\n              url: \"https://pranavputta22.github.io/mathscript\",\n            },\n          ]}\n        />\n      </ParallaxLayer>\n    </Parallax>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","import React from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Home } from \"../screens\";\n\nexport type StackParams = {\n  Home: {};\n};\n\nconst Stack = createStackNavigator<StackParams>();\n\nexport function Navigation() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import React from \"react\";\nimport { Platform, StyleSheet, View, Text } from \"react-native\";\nimport { Navigation } from \"./navigation\";\nclass App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Navigation />\n      </View>\n    );\n  }\n}\n\nconst height = Platform.OS == \"web\" ? \"100vh\" : \"100%\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: height,\n    width: \"100%\",\n  },\n});\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}