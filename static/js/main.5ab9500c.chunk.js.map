{"version":3,"sources":["assets/images/me2.jpg","assets/colors.ts","components/Header.tsx","screens/Home/index.tsx","navigation/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","props","animation","headerOpacity","line","Animated","Value","interpolate","inputRange","outputRange","timing","this","toValue","useNativeDriver","delay","start","View","style","styles","container","headerContainer","opacity","headerTextContainer","Text","headerText","width","marginTop","height","marginLeft","backgroundColor","colors","flex","Image","source","require","React","Component","StyleSheet","create","justifyContent","alignItems","backgroundImage","position","color","fontFamily","fontSize","fontWeight","letterSpacing","headerCaptionText","textAlign","flexDirection","profile","resizeMode","borderRadius","marginBottom","borderWidth","borderColor","Home","useNavigation","navigate","Stack","createStackNavigator","Navigation","NavigationContainer","Navigator","Screen","name","component","options","headerShown","App","Platform","OS","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ab9500c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me2.e055ed10.jpg\";","export default {\n  active: \"#18ffff\",\n};\n","import React from \"react\";\nimport { StyleSheet, View, Image, Text, Animated } from \"react-native\";\nimport colors from \"../assets/colors\";\n\nexport class Header extends React.Component {\n  private animation: Animated.Value;\n  private headerOpacity: Animated.AnimatedInterpolation;\n  private line: Animated.AnimatedInterpolation;\n\n  constructor(props: any) {\n    super(props);\n\n    this.animation = new Animated.Value(0);\n    this.headerOpacity = this.animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n    });\n    this.line = this.animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 160],\n    });\n  }\n\n  componentDidMount() {\n    Animated.timing(this.animation, {\n      toValue: 1,\n      useNativeDriver: true,\n      delay: 500,\n    }).start();\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.headerContainer, { opacity: this.headerOpacity }]}\n        >\n          <View style={[styles.headerTextContainer]}>\n            <Text style={styles.headerText}>PRANAV PUTTA</Text>\n            <Animated.View\n              style={{\n                width: this.line,\n                marginTop: 5,\n                height: 4,\n                marginLeft: 2,\n                backgroundColor: colors.active,\n              }}\n            />\n          </View>\n          <View style={{ flex: 1 }}>\n            <Image\n              style={{ flex: 1, width: \"100%\", height: \"100vh\" }}\n              source={require(\"../assets/images/me2.jpg\")}\n            />\n          </View>\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  backgroundImage: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  headerText: {\n    color: \"white\",\n    fontFamily: \"sans-serif\",\n    fontSize: 40,\n    fontWeight: \"bold\",\n    letterSpacing: 10,\n  },\n  headerCaptionText: {\n    color: \"white\",\n    fontFamily: \"sans-serif\",\n    fontSize: 20,\n    fontWeight: \"100\",\n    marginTop: 10,\n    textAlign: \"left\",\n  },\n  headerContainer: {\n    width: \"100%\",\n    //maxWidth: 1000,\n    height: \"100%\",\n    backgroundColor: \"rgba(0, 0, 0, 0.75)\",\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  headerTextContainer: {\n    justifyContent: \"center\",\n    flex: 1,\n    marginLeft: \"10%\",\n  },\n  profile: {\n    width: 90,\n    height: 90,\n    resizeMode: \"cover\",\n    borderRadius: 50,\n    marginBottom: 20,\n    borderWidth: 2,\n    borderColor: \"white\",\n  },\n});\n","import { useNavigation } from \"@react-navigation/native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { StackParams } from \"../../navigation\";\nimport { Header } from \"../../components/\";\n\ntype NavigationProps = StackNavigationProp<StackParams, \"Home\">;\n\nexport function Home() {\n  const { navigate } = useNavigation<NavigationProps>();\n  return (\n    <View style={styles.container}>\n      <Header />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","import React from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Home } from \"../screens\";\n\nexport type StackParams = {\n  Home: {};\n};\n\nconst Stack = createStackNavigator<StackParams>();\n\nexport function Navigation() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import React from \"react\";\nimport { Platform, StyleSheet, View, Text } from \"react-native\";\nimport { Navigation } from \"./navigation\";\nclass App extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Navigation />\n      </View>\n    );\n  }\n}\n\nconst height = Platform.OS == \"web\" ? \"100vh\" : \"100%\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: height,\n    width: \"100%\",\n  },\n});\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}